//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations 3.0.1.
//


package com.widen.product.main;

import android.content.Context;
import android.util.AttributeSet;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.widen.R.id;
import com.widen.R.layout;
import org.androidannotations.api.view.HasViews;
import org.androidannotations.api.view.OnViewChangedListener;
import org.androidannotations.api.view.OnViewChangedNotifier;


/**
 * We use @SuppressWarning here because our java code
 * generator doesn't know that there is no need
 * to import OnXXXListeners from View as we already
 * are in a View.
 * 
 */
@SuppressWarnings("unused")
public final class TimeLineItemView_
    extends TimeLineItemView
    implements HasViews, OnViewChangedListener
{

    private boolean alreadyInflated_ = false;
    private final OnViewChangedNotifier onViewChangedNotifier_ = new OnViewChangedNotifier();

    public TimeLineItemView_(Context context) {
        super(context);
        init_();
    }

    public TimeLineItemView_(Context context, AttributeSet attrs) {
        super(context, attrs);
        init_();
    }

    public static TimeLineItemView build(Context context) {
        TimeLineItemView_ instance = new TimeLineItemView_(context);
        instance.onFinishInflate();
        return instance;
    }

    /**
     * The mAlreadyInflated_ hack is needed because of an Android bug
     * which leads to infinite calls of onFinishInflate()
     * when inflating a layout with a parent and using
     * the <merge /> tag.
     * 
     */
    @Override
    public void onFinishInflate() {
        if (!alreadyInflated_) {
            alreadyInflated_ = true;
            inflate(getContext(), layout.time_line_item, this);
            onViewChangedNotifier_.notifyViewChanged(this);
        }
        super.onFinishInflate();
    }

    private void init_() {
        OnViewChangedNotifier previousNotifier = OnViewChangedNotifier.replaceNotifier(onViewChangedNotifier_);
        OnViewChangedNotifier.registerOnViewChangedListener(this);
        OnViewChangedNotifier.replaceNotifier(previousNotifier);
    }

    public static TimeLineItemView build(Context context, AttributeSet attrs) {
        TimeLineItemView_ instance = new TimeLineItemView_(context, attrs);
        instance.onFinishInflate();
        return instance;
    }

    @Override
    public void onViewChanged(HasViews hasViews) {
        timeline_color_line = ((ImageView) hasViews.findViewById(id.timeline_color_line));
        month_lay = ((FrameLayout) hasViews.findViewById(id.month_lay));
        year_lay = ((FrameLayout) hasViews.findViewById(id.year_lay));
        month = ((TextView) hasViews.findViewById(id.month));
        type_icon = ((ImageView) hasViews.findViewById(id.type_icon));
        day_lay = ((LinearLayout) hasViews.findViewById(id.day_lay));
        year = ((TextView) hasViews.findViewById(id.year));
        txt_1 = ((TextView) hasViews.findViewById(id.txt_1));
        name = ((TextView) hasViews.findViewById(id.name));
        finall_lay = ((FrameLayout) hasViews.findViewById(id.finall_lay));
        txt_2 = ((TextView) hasViews.findViewById(id.txt_2));
        today_txt = ((TextView) hasViews.findViewById(id.today_txt));
        type_40_txt = ((TextView) hasViews.findViewById(id.type_40_txt));
        day = ((TextView) hasViews.findViewById(id.day));
        navi_arrow = ((ImageView) hasViews.findViewById(id.navi_arrow));
    }

}
